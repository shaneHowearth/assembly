package assembly_test

import (
	"testing"

	money "github.com/Rhymond/go-money"
	assembly "github.com/shanehowearth/assemblyPayments/pkg"
	"github.com/stretchr/testify/assert"
)

func TestMain(m *testing.M) {

	testUsers = []*assembly.User{
		&assembly.User{Name: "TestUserA", BankBal: money.New(10000, "AUD")},
		&assembly.User{Name: "TestUserB", BankBal: money.New(10000, "AUD")},
	}
	testBooks = []*assembly.Book{

		&assembly.Book{Title: "TestBook", ForSale: true, Price: money.New(1000, "AUD"), Owner: testUsers[0]},
		&assembly.Book{Title: "TestBookB", ForSale: true, Price: money.New(1000, "AUD"), Owner: testUsers[1]},
		&assembly.Book{Title: "Not For Sale", ForSale: false, Price: money.New(1000, "AUD"), Owner: testUsers[1]},
	}
	m.Run()
}

var (
	testUsers    []*assembly.User
	testBooks    []*assembly.Book
	transactions []*assembly.Transaction
)

func testReset() {
	// Reset user's money
	testUsers[0].BankBal = money.New(10000, "AUD")
	testUsers[1].BankBal = money.New(10000, "AUD")

	// Reset book state
	testBooks[0].Owner = testUsers[0]
	testBooks[0].ForSale = true

	// Clear all transactions generated by tests
	transactions = transactions[:0]
}

func TestGetBookList(t *testing.T) {
	testcases := map[string]struct {
		username string
		response string
	}{
		"Successful search": {
			username: "TestUserA",
			response: "TestBook\n",
		},
		"Successful search with Not for sale book": {
			username: "TestUserb",
			response: "TestBookB\nNot For Sale\n",
		},
		"No username provided": {
			response: "TestBook\nTestBookB\n",
		},
		"Random case": {
			username: "TeSTuSeRA",
			response: "TestBook\n",
		},
		"Non Existant": {
			username: "Non-existant",
			response: "User not found",
		},
		"Leading and Trailing whitespace": {
			username: " TestUserA ",
			response: "TestBook\n",
		},
		"Unicode": {
			username: "Testing «ταБЬℓσ»: 1<2 & 4+1>3, now 20% off!",
			response: "User not found",
		},
	}
	testReset()
	for name, tc := range testcases {
		bookString := assembly.GetBookList(tc.username, testBooks, testUsers)
		assert.Equal(t, tc.response, bookString, "%s provided an incorrect book string", name)
	}
}
